name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]
permissions: write-all

jobs:
    compile:
        name: Compile site assets
        runs-on: [self-hosted, linux, x64]
        container:
            image: mkjost/simplewhale:latest
        steps:
          # - name: Check out the repo
          #   uses: actions/checkout@v2
          - name: test
            run: |
              echo "HELLO"
              ls
          - name: check info
            run: |
              # cat cat /proc/cpuinfo
              if [ -f /.dockerenv ]; then
                echo "I'm inside matrix ;(";
              else
                echo "I'm living in real world!";
              fi
          - name: build gem5
            run: |
              echo "nothing happens here"
              scons build/ALL/gem5.opt -j 24
              # scons build/ALL/gem5.fast -j4 --no-compress-debug --ignore-style
          - name: run x86 tests without initial build
            run: |
              cd tests
              ./main.py run gem5/x86-boot-tests -j24
              # ./main.py run -j4 -t4 gem5 -vv && scons -C .. --no-compress-debug --ignore-style build/ARM/unittests.opt
    # gcr.io/gem5-test/ubuntu-20.04_all-dependencies:v22-0

    # steps:
    #   - name: Check out the repo
    #     uses: actions/checkout@v2
    #   - name: Run the build process with Docker
    #     uses: addnab/docker-run-action@v3
    #     with:
    #       username: ${{ secrets.DOCKER_USERNAME }}
    #       password: ${{ secrets.DOCKER_PASSWORD }}
    #       shell: bash
    #       image: ./Dockerfile
    #       # options: -v ${{ github.workspace }}:/var/www
    #       run: |
    #         composer install
    #         npm install
    #         npm run production
    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v3
    #   - name: Login to Docker Hub
    #     uses: docker/login-action@v2
    #     with:
    #       username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #       password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    #   # - name: Set ownership 
    #   #   run: |
    #   #     # Workaround for https://github.com/actions/runner/issues/2033
    #   #     chown -R $(id -u):$(id -g) $PWD
    #   # - name: Set up Docker Buildx
    #   #   uses: docker/setup-buildx-action@v2
    #   # - name: Build and push
    #   #   uses: docker/build-push-action@v3
    #   #   with:
    #   #     context: .
    #   #     file: ./Dockerfile
    #   #     push: true
    #   #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest
    #   - name: Run the build process with Docker
    #     uses: addnab/docker-run-action@v3
    #     with:
    #       username: ${{ secrets.DOCKER_USERNAME }}
    #       password: ${{ secrets.DOCKER_PASSWORD }}
    #       image: aschmelyun/cleaver:latest
    #       # options: -v ${{ github.workspace }}:/var/www
    #       run: |
    #         echo "hello"
    #         # composer install
    #         # npm install
    #         # npm run production

    #   - name: Log the node version
    #     run: |
    #       if [ -f /.dockerenv ]; then
    #         echo "I'm inside matrix ;(";
    #       else
    #         echo "I'm living in real world!";
    #       fi
      # To use this repository's private action,
      # you must check out the repository
      # - name: Checkout
      #   uses: actions/checkout@v3
      # - name: Run the build process with Docker
      #   uses: addnab/docker-run-action@v3
      #   with:
      #     using: 'docker'
      #     image: 'Dockerfile'
      #     options: -v ${{ github.workspace }}:/var/www
      #     run: |
      #       if [ -f /.dockerenv ]; then
      #         echo "I'm inside matrix ;(";
      #       else
      #         echo "I'm living in real world!";
      #       fi
      # # - name: Hello world action step
      #   uses: ./ # Uses an action in the root directory
      #   id: hello
      #   with:
      #     who-to-greet: 'Mona the Octocat'
      # # Use the output from the `hello` step
      # - name: Get the output time
      #   run: echo "The time was ${{ steps.hello.outputs.time }}"
      # - name: tests
      #   run: |
      #     if [ -f /.dockerenv ]; then
      #       echo "I'm inside matrix ;(";
      #     else
      #       echo "I'm living in real world!";
      #     fi

  # compile:

  #   runs-on: [self-hosted, linux, x64]
  #   strategy:
  #     matrix:
  #       python-version: [3.8]

  #   steps:
  #     - uses: actions/checkout@v3

      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install flake8 pytest
      #     python -m pip install scons
      #     unset PYTHONPATH
      #     unset PYTHONHOME
      #     # export PYTHONPATH='/home/mkjost/.local/lib/python3.8/site-packages'
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Get changed files
      #   id: changed-files
      #   uses: tj-actions/changed-files@v19

      # - name: Install black and reorder-python-imports
      #   run: pip install black reorder-python-imports

      # - name: Black and Sort changed files
      #   run: |
      #     for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
      #       echo $file
      #       if [[ $file == *.py ]]; then
      #         black $file --check
      #         reorder-python-imports $file
      #       fi
      #     done
      # - name: print docker info
      #   uses: 'docker'
      #   image: 'Dockerfile'
      # #   run: |
      # #     # docker images
      # #     # docker run -u $UID:$GID --volume $(pwd):$(pwd) -w $(pwd) --rm "gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest" /usr/bin/env python3 /usr/bin/scons 
      # #     # cd tests
      # #     # scons build/ALL/gem5.opt -j 24
      # #     # ./main.py run gem5/x86-boot-tests -j24 --skip-build
      # #     pwd
      # #     echo "hello"
      # #     docker run -u $UID:$GID --volume $(pwd):$(pwd) -w $(pwd) --rm gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest /usr/bin/env python3 /usr/bin/scons build/ALL/gem5.fast -j4 --no-compress-debug --ignore-style
      # #     cd tests
      # #     echo "testing directory"
      # #     ls
      # #     ./main.py run -j4 -t4 gem5 -vv && scons -C .. --no-compress-debug --ignore-style build/ARM/unittests.opt
      # - name: Run the build process with Docker
      #   uses: addnab/docker-run-action@v3
      #   with:
      #     image: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
      #     # options: -v ${{ github.workspace }}:/var/www
      #     run: |
      #       echo "entered here"
      #       scons build/ALL/gem5.opt -j 24
      #       cd tests
      #       ./main.py run gem5/x86-boot-tests -j24 --skip-build

      # - name: Run build script
      #   run: |
      #     #  scons build/ALL/base/bitunion.test.opt
      #     #  ./build/ALL/base/bitunion.test.opt
      #     # python test.py
      #       scons build/ALL/gem5.opt -j 24
      #       pwd
      #       cd tests
      #      #  #  ./main.py run -j4 -t4 gem5 -vv && scons -C .. --no-compress-debug \ --ignore-style build/ARM/unittests.opt
      #      ./main.py run gem5/x86-boot-tests -j24 --skip-build
          

      # - run: echo "This job's status is ${{ job.status }}!"

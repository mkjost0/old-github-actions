name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]

jobs:
  hello_world_job:
    runs-on: [self-hosted, linux, x64]
    name: A job to say hello
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          using: 'docker'
          image: 'Dockerfile'
          options: -v ${{ github.workspace }}:/var/www
          run: |
            if [ -f /.dockerenv ]; then
              echo "I'm inside matrix ;(";
            else
              echo "I'm living in real world!";
            fi
      # - name: Hello world action step
      #   uses: ./ # Uses an action in the root directory
      #   id: hello
      #   with:
      #     who-to-greet: 'Mona the Octocat'
      # # Use the output from the `hello` step
      # - name: Get the output time
      #   run: echo "The time was ${{ steps.hello.outputs.time }}"
      # - name: tests
      #   run: |
      #     if [ -f /.dockerenv ]; then
      #       echo "I'm inside matrix ;(";
      #     else
      #       echo "I'm living in real world!";
      #     fi

  # compile:

  #   runs-on: [self-hosted, linux, x64]
  #   strategy:
  #     matrix:
  #       python-version: [3.8]

  #   steps:
  #     - uses: actions/checkout@v3

      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install flake8 pytest
      #     python -m pip install scons
      #     unset PYTHONPATH
      #     unset PYTHONHOME
      #     # export PYTHONPATH='/home/mkjost/.local/lib/python3.8/site-packages'
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Get changed files
      #   id: changed-files
      #   uses: tj-actions/changed-files@v19

      # - name: Install black and reorder-python-imports
      #   run: pip install black reorder-python-imports

      # - name: Black and Sort changed files
      #   run: |
      #     for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
      #       echo $file
      #       if [[ $file == *.py ]]; then
      #         black $file --check
      #         reorder-python-imports $file
      #       fi
      #     done
      # - name: print docker info
      #   uses: 'docker'
      #   image: 'Dockerfile'
      # #   run: |
      # #     # docker images
      # #     # docker run -u $UID:$GID --volume $(pwd):$(pwd) -w $(pwd) --rm "gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest" /usr/bin/env python3 /usr/bin/scons 
      # #     # cd tests
      # #     # scons build/ALL/gem5.opt -j 24
      # #     # ./main.py run gem5/x86-boot-tests -j24 --skip-build
      # #     pwd
      # #     echo "hello"
      # #     docker run -u $UID:$GID --volume $(pwd):$(pwd) -w $(pwd) --rm gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest /usr/bin/env python3 /usr/bin/scons build/ALL/gem5.fast -j4 --no-compress-debug --ignore-style
      # #     cd tests
      # #     echo "testing directory"
      # #     ls
      # #     ./main.py run -j4 -t4 gem5 -vv && scons -C .. --no-compress-debug --ignore-style build/ARM/unittests.opt
      # - name: Run the build process with Docker
      #   uses: addnab/docker-run-action@v3
      #   with:
      #     image: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
      #     # options: -v ${{ github.workspace }}:/var/www
      #     run: |
      #       echo "entered here"
      #       scons build/ALL/gem5.opt -j 24
      #       cd tests
      #       ./main.py run gem5/x86-boot-tests -j24 --skip-build

      # - name: Run build script
      #   run: |
      #     #  scons build/ALL/base/bitunion.test.opt
      #     #  ./build/ALL/base/bitunion.test.opt
      #     # python test.py
      #       scons build/ALL/gem5.opt -j 24
      #       pwd
      #       cd tests
      #      #  #  ./main.py run -j4 -t4 gem5 -vv && scons -C .. --no-compress-debug \ --ignore-style build/ARM/unittests.opt
      #      ./main.py run gem5/x86-boot-tests -j24 --skip-build
          

      - run: echo "This job's status is ${{ job.status }}!"
